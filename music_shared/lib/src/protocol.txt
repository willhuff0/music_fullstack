/auth/createUser : IdentityToken token (
    "name": String (2 <= length <= 24),
    "email": String (emailValidator),
    "password": String (8 <= length <= 64),
)

# Must provide either a uid or an email
/auth/startSession : IdentityToken token (
    "uid": String?,
    "email": String?,
    "password": String,
)

/auth/getName : String name (
    "token": IdentityToken,
)

String "songId" /song/create (
    "token": IdentityToken,
) {
    "fileExtension": String [.flac, .wav, ...],
    "numParts": int,
    "name": String (1 <= length <= 50),
    "description": String (length <= 100),
}

/song/uploadData (
    "token": IdentityToken,
    "songId": String,
    "start": int,
    "content-length": int (< 100000000 B (100 MB)),
) byte[] (length < 100000000 B (100 MB))

byte[] /song/getData (
    "token": IdentityToken,
    "songId": String,
    "start": int?,
    "end": int?,
    "format": int ?= 1 [0: opus, 1: aac],
    "quality": int ?= 2 [0: low, 1: medium, 2: high],
)

Song[] /song/search (
    "token": IdentityToken,
    "query": String (length <= 32),
    "start": int?,
    "limit": int? (<= 10),
)

byte[] /speedTest/{size [.5, 1, (int > 1)...] (MB)} ()